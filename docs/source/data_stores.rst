.. _data_stores:

===========
Data Stores
===========

The purpose of a Twined Data Store is to synchronise
metadata from objects in an object store (bucket) to a table in
the database.

This allows us to create, manage, filter and query for datasets
using straightforward SQL or the django ORM.

This is mega-powerful, because it enables us to **relate datasets to any other model in our webapp**... *"Here's the dataset we used to calculate this important thing we're showing you"*.

.. note::
   This is a common requirement in scientific applications, where
   large batches of files are generated by instrumentation in a relatively unstructured way.

   They then fester on a hard drive, accessible only to the people who generated them in the
   first place. Even if placed on a network drive, it's difficult to make them searchable across
   an organisation, or make them reusable in subsequent analyses.

   See the `data store examples <data_stores_examples>`_ for some example applications!

.. _data_stores_guiding_principles:

Guiding Principles
------------------

 - A datastore relates one bucket (with many objects) to one DB table.
 - Object metadata is *duplicated* to the database, making it searchable/filterable, but...
 - Object metadata remains the **source of truth** always.

.. warning::
   Object metadata is the source of truth, while the database is duplicated. This means
   that it **is possible** for database to be  **out of sync** with the object store, at least temporarily.

   Think of this as treating the database like a search index (because that's exactly what it is in this application!), whose contents get updated on a slight lag to actual data.

   `Synchronising Metadata <data_stores_synchronising_metadata>`_ deals with this subject.


.. _data_stores_dealing_with_metadata:

Dealing with Metadata
---------------------

It's a pain for everyone who is dealing with data to have to know django. In fact, we think it's impossible!!

So it's best if your team of scientists never touches the webapp code... And that's why we've built the `octue python library <https://github.com/octue/octue-sdk-python>`_.

Adding, using and editing datasets in the cloud has never been easier! See `the octue library <https://github.com/octue/octue-sdk-python>`_ for how to upload a
dataset to a cloud store. If ``django-twined`` is synchronising that bucket, the data is immediately usable in the webapp!

.. _data_stores_examples:

Examples
--------

Coming soon!
